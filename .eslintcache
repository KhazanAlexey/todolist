[{"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\index.tsx":"1","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"2","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"3","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\app\\App.tsx":"4","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\api\\todolists-api.ts":"6","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\Login\\Login.tsx":"7","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts":"8","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"9","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\Login\\auth-reducer.ts":"10","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\app\\app-reducer.ts":"11","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"12"},{"size":754,"mtime":1621525251357,"results":"13","hashOfConfig":"14"},{"size":4028,"mtime":1621538283729,"results":"15","hashOfConfig":"14"},{"size":1773,"mtime":1596295538000,"results":"16","hashOfConfig":"14"},{"size":2602,"mtime":1621540823555,"results":"17","hashOfConfig":"14"},{"size":5633,"mtime":1596722126000,"results":"18","hashOfConfig":"14"},{"size":3201,"mtime":1621539510278,"results":"19","hashOfConfig":"14"},{"size":4300,"mtime":1621536648817,"results":"20","hashOfConfig":"14"},{"size":4585,"mtime":1597327450000,"results":"21","hashOfConfig":"14"},{"size":1092,"mtime":1596716576000,"results":"22","hashOfConfig":"14"},{"size":2061,"mtime":1621539124934,"results":"23","hashOfConfig":"14"},{"size":2093,"mtime":1621538691081,"results":"24","hashOfConfig":"14"},{"size":952,"mtime":1594154724000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1stmcn5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\index.tsx",[],["54","55"],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["56","57","58","59","60","61","62","63"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo||!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["64","65","66"],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\app\\App.tsx",["67","68","69"],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts",["70","71"],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\api\\todolists-api.ts",[],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\Login\\Login.tsx",["72","73"],"import React, {useEffect} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required Password'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be > 2 sumbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            const email = values.email\r\n            const password = values.password\r\n            const rememberMe = values.rememberMe\r\n            dispatch(loginTC({email, password, rememberMe}))\r\n            // alert(JSON.stringify(values))\r\n            formik.resetForm()\r\n        }\r\n\r\n\r\n    })\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            // name=\"email\"\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            onBlur={formik.handleBlur}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name='password'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onBlur={formik.handleBlur}\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name=\"rememberMe\"\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts",["74"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\features\\Login\\auth-reducer.ts",["75","76"],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\app\\app-reducer.ts",[],"D:\\react\\itincubator\\todolist-16\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":37,"column":8,"nodeType":"83","endLine":37,"endColumn":10,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":42,"column":8,"nodeType":"83","endLine":42,"endColumn":10,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"85","line":47,"column":8,"nodeType":"83","endLine":47,"endColumn":10,"suggestions":"87"},{"ruleId":"81","severity":1,"message":"85","line":52,"column":8,"nodeType":"83","endLine":52,"endColumn":10,"suggestions":"88"},{"ruleId":"81","severity":1,"message":"85","line":57,"column":8,"nodeType":"83","endLine":57,"endColumn":10,"suggestions":"89"},{"ruleId":"81","severity":1,"message":"85","line":62,"column":8,"nodeType":"83","endLine":62,"endColumn":10,"suggestions":"90"},{"ruleId":"81","severity":1,"message":"85","line":67,"column":8,"nodeType":"83","endLine":67,"endColumn":10,"suggestions":"91"},{"ruleId":"81","severity":1,"message":"85","line":72,"column":8,"nodeType":"83","endLine":72,"endColumn":10,"suggestions":"92"},{"ruleId":"81","severity":1,"message":"93","line":15,"column":97,"nodeType":"83","endLine":15,"endColumn":130,"suggestions":"94"},{"ruleId":"81","severity":1,"message":"93","line":20,"column":8,"nodeType":"83","endLine":20,"endColumn":41,"suggestions":"95"},{"ruleId":"81","severity":1,"message":"93","line":24,"column":8,"nodeType":"83","endLine":24,"endColumn":41,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":13,"column":15,"nodeType":"99","messageId":"100","endLine":13,"endColumn":26},{"ruleId":"97","severity":1,"message":"101","line":21,"column":9,"nodeType":"99","messageId":"100","endLine":21,"endColumn":25},{"ruleId":"81","severity":1,"message":"102","line":36,"column":3,"nodeType":"83","endLine":36,"endColumn":5,"suggestions":"103"},{"ruleId":"97","severity":1,"message":"104","line":5,"column":9,"nodeType":"99","messageId":"100","endLine":5,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":13,"column":94,"nodeType":"107","messageId":"108","endLine":13,"endColumn":96},{"ruleId":"97","severity":1,"message":"109","line":1,"column":16,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"111","line":64,"column":32,"nodeType":"112","endLine":64,"endColumn":49},{"ruleId":"105","severity":1,"message":"106","line":10,"column":45,"nodeType":"107","messageId":"108","endLine":10,"endColumn":47},{"ruleId":"97","severity":1,"message":"113","line":3,"column":35,"nodeType":"99","messageId":"100","endLine":3,"endColumn":47},{"ruleId":"97","severity":1,"message":"114","line":5,"column":9,"nodeType":"99","messageId":"100","endLine":5,"endColumn":18},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["117"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["118"],["119"],["120"],["121"],["122"],["123"],["124"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["125"],["126"],["127"],"@typescript-eslint/no-unused-vars","'SortByAlpha' is defined but never used.","Identifier","unusedVar","'fetchTodolistsTC' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["128"],"'setAppErrorAC' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'todolistsAPI' is defined but never used.","'addTaskAC' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"131","fix":"133"},{"desc":"131","fix":"134"},{"desc":"131","fix":"135"},{"desc":"131","fix":"136"},{"desc":"131","fix":"137"},{"desc":"131","fix":"138"},{"desc":"139","fix":"140"},{"desc":"139","fix":"141"},{"desc":"139","fix":"142"},{"desc":"131","fix":"143"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"144","text":"145"},"Update the dependencies array to be: [dispatch]",{"range":"146","text":"147"},{"range":"148","text":"147"},{"range":"149","text":"147"},{"range":"150","text":"147"},{"range":"151","text":"147"},{"range":"152","text":"147"},{"range":"153","text":"147"},"Update the dependencies array to be: [props]",{"range":"154","text":"155"},{"range":"156","text":"155"},{"range":"157","text":"155"},{"range":"158","text":"147"},[1233,1235],"[demo, dispatch, isLoggedIn]",[1404,1406],"[dispatch]",[1575,1577],[1780,1782],[1993,1995],[2194,2196],[2341,2343],[2520,2522],[765,798],"[props]",[1071,1104],[1261,1294],[1210,1212]]